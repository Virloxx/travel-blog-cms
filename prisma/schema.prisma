// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

// Add to diagram
model Spotlight {
  id      Int  @id @default(autoincrement())
  postId  Int
  post    Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Features {
  id      Int  @id @default(autoincrement())
  postId  Int  @unique
  post    Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Misc_Info {
  id    Int    @id @default(autoincrement())
  key   String
  value String
}

model Post {
  id                Int         @id @default(autoincrement())
  title             String
  thumbnail_img     String
  short_description String // Add to diagram
  content           String
  created_at        DateTime
  edited_at         DateTime
  Spotlight         Spotlight[]  // Relation to Spotlight
  Features          Features[]   // Relation to Features
  
  comments          Comment[]   // Relation to comments
}

model User {
  id           Int      @id @default(autoincrement())
  login        String   @unique
  passwordHash String   @map("password_hash")
  userInfo     UserInfo? @relation()
  comments     Comment[] // Relation to comments

  @@map("User")
}

model UserInfo {
  id            Int      @id
  name          String
  createdAt     DateTime @default(now()) @map("created_at")
  editedAt      DateTime? @map("edited_at")
  isAdmin       Boolean  @default(false) @map("is_admin")
  profilePicUrl String?  @map("profile_pic_url")

  user          User     @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("User_info")
}



model Comment {
  id        Int      @id @default(autoincrement())
  rootId    Int?     // ID of the first comment in the discussion thread (null for the first comment)
  userId    Int      
  postId    Int      // ID of the Post under which the comment was posted
  createdAt DateTime @default(now())
  editedAt  DateTime?
  content   String

  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}
